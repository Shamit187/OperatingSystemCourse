diff --git a/Makefile b/Makefile
index 39a99d7..881c41b 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -125,9 +126,12 @@ UPROGS=\
 	$U/_ln\
 	$U/_ls\
 	$U/_mkdir\
+	$U/_printactivepage\
+	$U/_printswappedpage\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_test1\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
@@ -153,7 +157,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
@@ -169,5 +173,5 @@ qemu: $K/kernel fs.img
 
 qemu-gdb: $K/kernel .gdbinit fs.img
 	@echo "*** Now run 'gdb' in another window." 1>&2
-	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
+	$(QEMU) $(QEMacquire(&swapPageLock);UOPTS) -S $(QEMUGDB)
 
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..d31552d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
 
 // bio.c
 void            binit(void);
@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -107,6 +110,21 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+#define         MAXLIVEPAGE 40
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+void            add_active_page(pagetable_t, void*);
+int             print_active_pages(void);
+void            remove_active_page(pagetable_t, void*);
+int             print_swapped_pages(void);
+void            swap_page_to_disk(pagetable_t , void *);
+void            swap_disk_to_page(pagetable_t , void *);
+void            remove_from_swap_list(pagetable_t , void *);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -187,3 +205,9 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+//debug definition
+// #define DEBUG_LPL // live page list debug, checking to see if pages are added and removed properly
+// #define DEBUG_KTL // accessing pagetable is denied... checking to see what's the issue
+// #define DEBUG_SWP // to debug swapping action
+// #define DEBUG_LCK
\ No newline at end of file
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..5afb261 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -80,7 +80,7 @@ exec(char *path, char **argv)
   // Use the second as the user stack.
   sz = PGROUNDUP(sz);
   uint64 sz1;
-  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W)) == 0)
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W | PTE_G)) == 0)
     goto bad;
   sz = sz1;
   uvmclear(pagetable, sz-2*PGSIZE);
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..ec0a5f5 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -19,6 +19,7 @@ main()
     kinit();         // physical page allocator
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
+    swapinit();      // initialize swap table and live page table
     procinit();      // process table
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..3c520ca 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_S (1L << 9) // swapped page
+#define PTE_G (1L << 8) // stack and stack guard
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..eca0b56
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,473 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+uint64 arrivalCounter;
+
+struct spinlock livePageLock;
+struct spinlock swapPageLock;
+
+struct livePage {
+  uint8 is_active;
+  pagetable_t pagetable;
+  void* va;
+  uint64 arrival;
+};
+
+struct livePage livePageList[MAXLIVEPAGE];
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+  pagetable_t pagetable;
+  void* va;
+  struct swap *next;
+};
+
+struct swap *headSwapList;
+struct swap *tailSwapList;
+
+struct run {
+  struct run *next;
+};
+
+// struct spinlock swapPageLock;
+
+// struct swapNode {
+//   struct swap *data;
+//   struct swapNode *next;
+// };
+
+// struct swapNode *swapHead;
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  arrivalCounter = 0;
+  headSwapList = 0;
+  tailSwapList = 0;
+  initlock(&swapPageLock, "swappage");
+  initlock(&livePageLock, "livepage");
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+  for(int i = 0; i < MAXLIVEPAGE; i++){
+    livePageList[i].is_active = 0;
+  }
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+  
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
+
+// If a page is allocated and being used by a processor,
+// Add that page to active page table list by calling add active page
+// To Remove a page from the table refer to remove active page
+void
+add_active_page(pagetable_t pagetable, void* va)
+{
+  int search_index = 0;
+
+  //check to see if it's X page
+  pte_t* pte = walk(pagetable, (uint64)va, 0);
+  if(*pte & PTE_X){
+    #ifdef DEBUG_LPL
+      printf("DEBUG_LPL:: (list add) Trying to add an executable page.\n");
+    #endif
+    return;
+  }
+  if(*pte & PTE_G){
+    #ifdef DEBUG_LPL
+      printf("DEBUG_LPL:: (list add) Trying to add an stack and stack guard page.\n");
+    #endif
+    return;
+  }
+
+  
+  //acquire(&livePageLock);
+  for(; search_index < MAXLIVEPAGE; search_index++){
+    if(livePageList[search_index].is_active == 0) break;
+  }
+  
+  // page swap if more than 50 livepage needs to be allocated....
+  // need to change code
+  if(search_index == MAXLIVEPAGE){
+    //search the oldest livepage first
+    int oldest_index = 0;
+    uint64 min_value = arrivalCounter;
+
+    for(int i = 0; i < MAXLIVEPAGE; i++){
+      if(livePageList[i].is_active && livePageList[i].arrival < min_value){
+        min_value = livePageList[i].arrival;
+        oldest_index = i;
+      }
+    }
+    #ifdef DEBUG_SWP
+      printf("DEBUG_SWP:: (list add) page swap needed. entry chosen for swap: %d\n", oldest_index);
+    #endif
+
+    swap_page_to_disk(livePageList[oldest_index].pagetable, livePageList[oldest_index].va);
+    search_index = oldest_index;
+  }
+
+  livePageList[search_index].is_active = 1;
+  livePageList[search_index].pagetable = pagetable;
+  livePageList[search_index].va = va;
+  livePageList[search_index].arrival = arrivalCounter++;
+
+  //release(&livePageLock);
+
+  #ifdef DEBUG_LPL
+    pte = walk(livePageList[search_index].pagetable, (uint64)livePageList[search_index].va, 0);
+    printf("DEBUG_LPL:: (list add) Page Listed to entry: %d (va: %p, pa: %p)\n"
+          , search_index
+          , va
+          , PTE2PA(*pte));
+  #endif
+}
+
+void 
+remove_active_page(pagetable_t pagetable, void* va)
+{
+  int search_index = 0;
+  acquire(&livePageLock);
+  for(; search_index < MAXLIVEPAGE; search_index++){
+    if(livePageList[search_index].pagetable == pagetable
+      && livePageList[search_index].va == va
+      && livePageList[search_index].is_active == 1) break;
+  }
+  if(search_index == MAXLIVEPAGE){ //page may be in swapped pages...
+    release(&livePageLock);
+    #ifdef DEBUG_LPL
+      printf("DEBUG_LPL::(list remove) Page was not in the active pages\n");
+    #endif
+
+    remove_from_swap_list(pagetable, va);
+    return;
+  }
+  livePageList[search_index].is_active = 0;
+  release(&livePageLock);
+  #ifdef DEBUG_LPL
+    pte_t* pte = walk(livePageList[search_index].pagetable, (uint64)livePageList[search_index].va, 0);
+    printf("DEBUG_LPL:: (list remove) Page removed from entry: %d (va: %p, pa: %p)\n"
+          , search_index
+          , va
+          , PTE2PA(*pte));
+  #endif
+
+}
+
+
+int
+print_active_pages()
+{
+  int count = 0;
+
+  acquire(&livePageLock);
+
+  for(int i = 0; i < MAXLIVEPAGE; i++){
+    if(livePageList[i].is_active == 0) continue;
+    ++count;
+    pte_t *pte = walk(livePageList[i].pagetable,(uint64)livePageList[i].va, 0);
+    printf("Live Page entry: %d\t (va: %p, pa: %p arrival: %d)\n"
+        , i
+        , livePageList[i].va
+        , PTE2PA(*pte)
+        , livePageList[i].arrival);
+        // , livePageList[i].pagetable);
+  }
+
+  release(&livePageLock);
+  printf("Total active pages: %d\n", count);
+  return count? -1 : 0;
+}
+
+
+void
+swap_page_to_disk(pagetable_t pagetable, void *va)
+{
+  // first make the physical address of the page invalid for the user
+  pte_t *pte = walk(pagetable, (uint64)va, 0);
+  *pte &= ~PTE_V;
+  *pte |= PTE_S;
+  #ifdef DEBUG_SWP
+    printf("DEBUG_SWP:: (P->D) Swapped bit turned on and valid bit turned off\n");
+  #endif
+
+  // get a swap struct
+  struct swap *allocStruct;
+  allocStruct = swapalloc();
+
+  // now swapping time
+  swapout(allocStruct,(char *)PTE2PA(*pte));
+  allocStruct->next = 0;
+  allocStruct->pagetable = pagetable;
+  allocStruct->va = va;
+  #ifdef DEBUG_SWP
+    printf("DEBUG_SWP:: (P->D) Swapping operation done\n");
+    printf("Disk memory===============================\n");
+    for(int i = 0; i < NBLOCKPERPAGE; i++){
+      printf("%d:: %p\n", i, allocStruct->blocknos[i]);
+    }
+    printf("==========================================\n");
+
+  #endif
+
+  // connect the data to the linked list
+  // corner case first
+
+  acquire(&swapPageLock);
+  if (!headSwapList){
+    headSwapList = allocStruct;
+    tailSwapList = allocStruct;
+  } else {
+    //default case
+    tailSwapList->next = allocStruct;
+    tailSwapList = allocStruct;
+  }
+  release(&swapPageLock);
+
+  #ifdef DEBUG_SWP
+    printf("DEBUG_SWP:: Successfully Swapped: (pt: %p va: %p)\n", tailSwapList->pagetable, tailSwapList->va);
+  #endif
+}
+
+
+void
+swap_disk_to_page(pagetable_t pagetable, void *va)
+{
+  // first search through the list to match pagetable and virtual address
+  #ifdef DEBUG_SWP
+    printf("DEBUG_SWP:: entered swap disk to page\n");
+  #endif
+
+  struct swap *current;
+  struct swap *prev;
+  struct swap *found;
+  current = headSwapList;
+  prev = 0;
+  found = 0;
+
+  while(current){
+    if(current->pagetable == pagetable && current->va == va){
+      found = current;
+      break;
+    }
+    prev = current;
+    current = current->next;
+  }
+
+  #ifdef DEBUG_SWP
+    printf("DEBUG_SWP:: found the needed swapped data: %p\n", found);
+  #endif
+  // so we rip off the found node from the list... maintaining the corner case
+  // possible corner case:
+  // found at beginning
+  // found at end
+  // found at both begin and end... only found is there : clear everything
+
+  if(!found) {
+    printf("Failed to find the needed swap");
+    exit(-1);
+  }
+  if(headSwapList == found && tailSwapList == found) {
+    headSwapList = tailSwapList = 0;
+  } else if(headSwapList == found) {
+    headSwapList = found->next;
+  } else if(tailSwapList == found) {
+    tailSwapList = prev;
+    tailSwapList->next = 0;
+  } else {
+    prev->next = found->next;
+  }
+
+  #ifdef DEBUG_SWP
+    printf("DEBUG_SWP:: Removed the swapped data from list\n");
+  #endif
+  // now put the memory of the disk into a physical address
+  char *mem = kalloc();
+  swapin(mem, found);
+
+  #ifdef DEBUG_SWP
+    printf("DEBUG_SWP:: Swapped memory properly\n");
+  #endif
+
+  // last task... map page
+  uint64 flags = PTE_FLAGS(*(walk(pagetable, (uint64)va, 0)));
+  flags |= PTE_V;
+  flags &= ~PTE_S;
+  mappages(pagetable, (uint64)va, PGSIZE, (uint64)mem, flags);
+  add_active_page(pagetable, va);
+
+  #ifdef DEBUG_SWP
+    printf("DEBUG_SWP:: page successfully mapped\n");
+    printf("CURRENT ACTIVEPAGELIST::\n");
+    printf("===================================================\n");
+    print_active_pages();
+    printf("===================================================\n");
+  #endif
+}
+
+int
+print_swapped_pages(void)
+{
+  struct swap *current;
+  current = headSwapList;
+  int counter = 0;
+
+  while(current){
+    printf("Swapped page entry: %d\t (pt: %p, va: %p)\n", ++counter, current->pagetable, current->va);
+    current = current->next;
+  }
+
+  return counter? 0 : -1;
+}
+
+void
+remove_from_swap_list(pagetable_t pagetable, void* va)
+{
+  struct swap *current;
+  struct swap *prev;
+  struct swap *found;
+  current = headSwapList;
+  prev = 0;
+  found = 0;
+
+  while(current){
+    if(current->pagetable == pagetable && current->va == va){
+      found = current;
+      break;
+    }
+    prev = current;
+    current = current->next;
+  }
+
+  if(!found) {
+    return;
+  }
+  if(headSwapList == found && tailSwapList == found) {
+    headSwapList = tailSwapList = 0;
+  } else if(headSwapList == found) {
+    headSwapList = found->next;
+  } else if(tailSwapList == found) {
+    tailSwapList = prev;
+    tailSwapList->next = 0;
+  } else {
+    prev->next = found->next;
+  }
+
+  char *mem = kalloc();
+  swapin(mem, found);
+  kfree(mem);
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..a24683e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_LPinfo(void);
+extern uint64 sys_SPinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_LPinfo]  sys_LPinfo,
+[SYS_SPinfo]  sys_SPinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..4e1038e 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_LPinfo 22
+#define SYS_SPinfo 23
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..612b8fc 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -503,3 +503,15 @@ sys_pipe(void)
   }
   return 0;
 }
+
+uint64
+sys_LPinfo(void)
+{
+  return print_active_pages();
+}
+
+uint64
+sys_SPinfo(void)
+{
+  return print_swapped_pages();
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..a65c016 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,6 +67,29 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
+  } else if (r_scause() == 15){
+    pte_t* nonwritable_entry = walk(p->pagetable, r_stval(), 0);
+    #ifdef DEBUG_SWP
+      printf("DEBUG_SWP:: User f Trap occured: (pt = %p, va = %p)\n", p->pagetable, PGROUNDDOWN(r_stval()));
+    #endif
+    if(*nonwritable_entry & PTE_S){
+      #ifdef DEBUG_SWP
+        //printf("Hello?\n");
+      #endif
+
+      
+      //error occured here
+      swap_disk_to_page(p->pagetable, (void *)PGROUNDDOWN(r_stval()));
+
+
+      #ifdef DEBUG_SWP
+        //printf("Hello?\n");
+      #endif
+      p->trapframe->epc = r_sepc();
+      #ifdef DEBUG_SWP
+        printf("User Trap Fixed\n");
+      #endif
+    }
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..a1f1453 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -85,11 +85,19 @@ kvminithart()
 pte_t *
 walk(pagetable_t pagetable, uint64 va, int alloc)
 {
+  #ifdef DEBUG_KTL 
+    printf("Walk called\n");
+  #endif
+
   if(va >= MAXVA)
     panic("walk");
 
   for(int level = 2; level > 0; level--) {
+    #ifdef DEBUG_KTL 
+      printf("%d-%p-%p\t",level,pagetable,pagetable[PX(level, va)]);
+    #endif
     pte_t *pte = &pagetable[PX(level, va)];
+
     if(*pte & PTE_V) {
       pagetable = (pagetable_t)PTE2PA(*pte);
     } else {
@@ -99,6 +107,11 @@ walk(pagetable_t pagetable, uint64 va, int alloc)
       *pte = PA2PTE(pagetable) | PTE_V;
     }
   }
+
+  #ifdef DEBUG_KTL 
+      printf("end\n");
+  #endif
+
   return &pagetable[PX(0, va)];
 }
 
@@ -179,10 +192,16 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_S)){
+      //do nothing ig... for now
+    }
+    if((*pte & PTE_V) == 0 && (*pte & PTE_S) == 0)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
+    
+    remove_active_page(pagetable, (void *)a);
+    
     if(do_free){
       uint64 pa = PTE2PA(*pte);
       kfree((void*)pa);
@@ -227,11 +246,16 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 {
   char *mem;
   uint64 a;
+  int checkStackGuard = xperm & PTE_G;
 
   if(newsz < oldsz)
     return oldsz;
 
   oldsz = PGROUNDUP(oldsz);
+  #ifdef DEBUG_LPL
+    printf("DEBUG_LPL:: Allocating %d new pages\n", ((newsz - oldsz + PGSIZE - 1) / PGSIZE)); 
+                                                    //don't worry this just calculates ceil of (new - old) / page
+  #endif
   for(a = oldsz; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
@@ -244,6 +268,8 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+    if(!checkStackGuard)
+      add_active_page(pagetable, (void *)a);
   }
   return newsz;
 }
@@ -310,10 +336,14 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   uint flags;
   char *mem;
 
+  #ifdef DEBUG_LPL
+    printf("DEBUG_LPL:: Copying %d pages from parent program\n", sz/PGSIZE);
+  #endif
+
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_S) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
@@ -324,6 +354,9 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       kfree(mem);
       goto err;
     }
+
+    add_active_page(new, (void *)i);
+    
   }
   return 0;
 
@@ -340,6 +373,9 @@ uvmclear(pagetable_t pagetable, uint64 va)
   pte_t *pte;
   
   pte = walk(pagetable, va, 0);
+
+  remove_active_page(pagetable, (void *)va);
+
   if(pte == 0)
     panic("uvmclear");
   *pte &= ~PTE_U;
diff --git a/swap.patch b/swap.patch
new file mode 100644
index 0000000..6c0f8ed
--- /dev/null
+++ b/swap.patch
@@ -0,0 +1,210 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..597ac8c 100644
+--- a/Makefile
++++ b/Makefile
+@@ -24,6 +24,7 @@ OBJS = \
+   $K/sleeplock.o \
+   $K/file.o \
+   $K/pipe.o \
++  $K/swap.o \
+   $K/exec.o \
+   $K/sysfile.o \
+   $K/kernelvec.o \
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..b8a6919 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct swap;
+ 
+ // bio.c
+ void            binit(void);
+@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
+ 
+ // fs.c
+ void            fsinit(int);
++uint            balloc(uint dev);
++void            bfree(int dev, uint b);
+ int             dirlink(struct inode*, char*, uint);
+ struct inode*   dirlookup(struct inode*, char*, uint*);
+ struct inode*   ialloc(uint, short);
+@@ -107,6 +110,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
+ 
++// swap.c
++void            swapinit(void);
++void            swapfree(struct swap*);
++struct swap*    swapalloc(void);
++void            swapout(struct swap *dst_sp, char *src_pa);
++void            swapin(char *dst_pa, struct swap *src_sp);
++
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+ 
+diff --git a/kernel/fs.c b/kernel/fs.c
+index c6bab15..2d9b419 100644
+--- a/kernel/fs.c
++++ b/kernel/fs.c
+@@ -62,7 +62,7 @@ bzero(int dev, int bno)
+ 
+ // Allocate a zeroed disk block.
+ // returns 0 if out of disk space.
+-static uint
++uint
+ balloc(uint dev)
+ {
+   int b, bi, m;
+@@ -88,7 +88,7 @@ balloc(uint dev)
+ }
+ 
+ // Free a disk block.
+-static void
++void
+ bfree(int dev, uint b)
+ {
+   struct buf *bp;
+diff --git a/kernel/swap.c b/kernel/swap.c
+new file mode 100644
+index 0000000..f33bf40
+--- /dev/null
++++ b/kernel/swap.c
+@@ -0,0 +1,135 @@
++#include "types.h"
++#include "riscv.h"
++#include "fs.h"
++#include "spinlock.h"
++#include "defs.h"
++#include "param.h"
++#include "sleeplock.h"
++#include "buf.h"
++
++#define NBLOCKPERPAGE (PGSIZE / BSIZE)
++
++struct swap {
++  uint blocknos[NBLOCKPERPAGE];
++};
++
++struct run {
++  struct run *next;
++};
++
++struct {
++  struct spinlock lock;
++  struct run *freelist;
++} swapmem;
++
++// Initialize swapmem
++void
++swapinit(void)
++{
++  initlock(&swapmem.lock, "swapmem");
++  swapmem.freelist = 0;
++}
++
++// Allocate one swap struct.
++// Returns a pointer to the swap struct.
++// Returns 0 if the memory cannot be allocated.
++struct swap *
++swapalloc(void)
++{
++  struct run *r;
++  struct swap *s;
++
++  acquire(&swapmem.lock);
++  r = swapmem.freelist;
++  if(!r){
++    release(&swapmem.lock);
++    char *mem = kalloc();
++    char *mem_end = mem + PGSIZE;
++    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
++      r = (struct run*)mem;
++
++      acquire(&swapmem.lock);
++      r->next = swapmem.freelist;
++      swapmem.freelist = r;
++      release(&swapmem.lock);
++    }
++    acquire(&swapmem.lock);
++    r = swapmem.freelist;
++  }
++  swapmem.freelist = r->next;
++  release(&swapmem.lock);
++  
++  s = (struct swap*)r;
++  if(s)
++    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
++  
++  return s;
++}
++
++// Free the swap struct pointed by s, and the blocks
++// contained in s, which normally should have been returned
++// by a call to swapalloc() and swapout().
++void
++swapfree(struct swap *s)
++{
++  uint *blockno;
++  struct run *r;
++
++  if(!s)
++    panic("swapfree");
++  
++  begin_op();
++  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
++    if(*blockno)
++      bfree(ROOTDEV, *blockno);
++  }
++  end_op();
++
++  r = (struct run*)s;
++
++  acquire(&swapmem.lock);
++  r->next = swapmem.freelist;
++  swapmem.freelist = r;
++  release(&swapmem.lock);
++}
++
++// Swap out a given physical page src_pa to disk.
++// The metadata for retriving src_pa will be saved
++// to dst_pa which normally should have been returned
++// by a call to swapalloc().
++void
++swapout(struct swap *dst_sp, char *src_pa)
++{
++  uint *blockno;
++  struct buf *bp;
++  
++  begin_op();
++  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
++    *blockno = balloc(ROOTDEV);
++    if(*blockno == 0)
++      panic("swapout");
++    bp = bread(ROOTDEV, *blockno);
++    memmove(bp->data, src_pa, BSIZE);
++    log_write(bp);
++    brelse(bp);
++  }
++  end_op();
++}
++
++// Swap in a page into dst_pa from disk using src_sp.
++// src_sp should normally be updated with metadata
++// for retriving the page by a call to swapout().
++void
++swapin(char *dst_pa, struct swap *src_sp)
++{
++  uint *blockno;
++  struct buf *bp;
++  
++  if(!dst_pa)
++    panic("swapin");
++  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
++    bp = bread(ROOTDEV, *blockno);
++    memmove(dst_pa, bp->data, BSIZE);
++    brelse(bp);
++  }
++}
diff --git a/user/printactivepage.c b/user/printactivepage.c
new file mode 100644
index 0000000..53f8d7c
--- /dev/null
+++ b/user/printactivepage.c
@@ -0,0 +1,10 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(void)
+{
+    LPinfo();
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/printswappedpage.c b/user/printswappedpage.c
new file mode 100644
index 0000000..8a8afd0
--- /dev/null
+++ b/user/printswappedpage.c
@@ -0,0 +1,10 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(void)
+{
+    SPinfo();
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/test1.c b/user/test1.c
new file mode 100644
index 0000000..5a35f5c
--- /dev/null
+++ b/user/test1.c
@@ -0,0 +1,20 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#define PGSIZE 4096
+
+int
+main(int argc, char *argv[])
+{
+    if(argc != 2){
+        printf("Usage:: test1 <number of page>\n");
+    }
+
+    int pid = fork();
+    if(pid < 0) exit(-1);
+    if(pid != 0) exit(0);
+    int pages = atoi(argv[1]);
+
+    sbrk(PGSIZE * pages);
+    while(1);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..63e74db 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int LPinfo(void);
+int SPinfo(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..ee99da6 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("LPinfo");
+entry("SPinfo");
