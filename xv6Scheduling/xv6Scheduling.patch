diff --git a/Makefile b/Makefile
index 39a99d7..fad089d 100644
--- a/Makefile
+++ b/Makefile
@@ -13,6 +13,7 @@ OBJS = \
   $K/main.o \
   $K/vm.o \
   $K/proc.o \
+  $K/rand.o \
   $K/swtch.o \
   $K/trampoline.o \
   $K/trap.o \
@@ -128,6 +129,8 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_testprocinfo\
+	$U/_testticket\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..5e9d1ea 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,13 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int number);
+int             getpinfo(struct pstat *data);
+
+// rand.c
+void            set_seed(unsigned long seed);
+unsigned long   rand(void);
+int             random_choice(unsigned long *ticket_proc, char proc_size);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..ea1db9b 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -29,6 +29,7 @@ main()
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
+    set_seed(92753); // setting seed value for random number generation
     __sync_synchronize();
     started = 1;
   } else {
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..249b1ef 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -9,5 +9,6 @@
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define FSSIZE     2000  // size of file system in blocks
+#define MAXPATH     128  // maximum file path name
+#define ITICKET       1  // set this ticket value when ever a process starts 
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..a2e199b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -251,6 +252,16 @@ userinit(void)
 
   p->state = RUNNABLE;
 
+  // ticket based scheduler implementation
+  // the first process that is ever created will be forked to create new processes
+  // when forking, child will take it's parents ticket info to get started
+  // so to set things straight I'm adding these lines for the first ever process to get the based ticket value
+  // ITICKET = Initial Ticket... defined in param.h
+  p->original_ticket = ITICKET;
+  p->current_ticket = ITICKET;
+
+  p->timeslice = 0;
+
   release(&p->lock);
 }
 
@@ -302,6 +313,13 @@ fork(void)
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
+  acquire(&p->lock);
+  // copy ticket infos from parent
+  np->current_ticket = p->current_ticket;
+  np->original_ticket = p->original_ticket;
+  np->timeslice = 0;
+  release(&p->lock);
+
   // increment reference counts on open file descriptors.
   for(i = 0; i < NOFILE; i++)
     if(p->ofile[i])
@@ -377,6 +395,9 @@ exit(int status)
 
   p->xstate = status;
   p->state = ZOMBIE;
+  p->current_ticket = 0;
+  p->original_ticket = ITICKET;
+  p->timeslice = 0;
 
   release(&wait_lock);
 
@@ -446,12 +467,17 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-  
+  struct proc *runnable_proc[NPROC];
+  uint64 ticket_proc[NPROC];
   c->proc = 0;
+  uint8 proc_number = 0;
+
+  // Old Scheduler Implementation
+  /* 
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
-
+    
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
@@ -468,7 +494,62 @@ scheduler(void)
       }
       release(&p->lock);
     }
+    
+  }
+  */
+
+  // This is my implementation
+  for(;;){
+    // Avoid deadlock by ensuring that devices can interrupt.
+    intr_on();
+
+    // Step 1: Collect ticket info
+    proc_number = 0;
+    for(p = proc; p < &proc[NPROC]; p++){
+      acquire(&p->lock);
+      if(p->state == RUNNABLE){
+        runnable_proc[proc_number] = p;
+        ticket_proc[proc_number] = p->current_ticket;
+        proc_number++;
+      }
+      release(&p->lock);
+    }
+
+    // if no runnable process available, then code should not continue
+    if(proc_number == 0) continue;
+
+    // Step 2: Send the ticket info to the random choice algorithm
+    int choice = random_choice(ticket_proc, proc_number);
+    if(choice < 0){ // p = -1 if sum of all current ticket is 0, then reinstate original tickets to all process
+      for(p = proc; p < &proc[NPROC]; p++){
+        acquire(&p->lock);
+        p->current_ticket = p->original_ticket;
+        release(&p->lock);
+      }
+      continue;
+    }
+    p = runnable_proc[choice];
+
+    // Step 3: Run the process
+    acquire(&p->lock);
+    if(p->state == RUNNABLE) {
+      // Switch to chosen process.  It is the process's job
+      // to release its lock and then reacquire it
+      // before jumping back to us.
+      // printf("Running %d: %s\n", p->pid, p->name);
+      p->state = RUNNING;
+      p->timeslice ++;
+      p->current_ticket--;
+      c->proc = p;
+      swtch(&c->context, &p->context);
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = 0;
+    }
+    release(&p->lock);
   }
+
 }
 
 // Switch to scheduler.  Must hold only p->lock
@@ -681,3 +762,36 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+settickets(int number)
+{
+  if(number <= 0) return -1;
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->current_ticket = number;
+  p->original_ticket = number;
+  release(&p->lock);
+  return 0;
+}
+
+int
+getpinfo(struct pstat *data)
+{
+  if(data <= 0) return -1;
+  struct proc *p;
+  struct pstat ps;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    ps.pid[i] = p->pid;
+    ps.inuse[i] = (p->state == UNUSED || p->state == ZOMBIE) ? 0 : 1;
+    ps.tickets_original[i] = p->original_ticket;
+    ps.tickets_current[i] = p->current_ticket;
+    ps.time_slices[i] = p->timeslice;
+    i++;
+    release(&p->lock);
+  }
+  copyout(myproc()->pagetable, (uint64) data, (char*)&ps, sizeof(struct pstat));
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..15591d5 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  uint64 current_ticket;       // Ticket value for schedular, decreases 1 after every run
+  uint64 original_ticket;      // When ticket value gets to 0, revert back to original_ticket value
+
+  uint64 timeslice;            // To know how many timeslice the process was given
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..15fa3e5
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process  originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..0f066db
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,46 @@
+#include "types.h"
+#include "param.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "riscv.h"
+#include "defs.h"
+// #include "fs.h"
+// #include "buf.h"
+
+uint64 xorshift_state;
+
+void 
+set_seed(uint64 seed)
+{
+    xorshift_state = seed;
+}
+
+uint64 
+rand(void)
+{
+    uint64 x = xorshift_state;
+    x ^= x << 13;
+    x ^= x >> 7;
+    x ^= x << 17;
+    xorshift_state = x;
+    return x;
+}
+
+int 
+random_choice(uint64 *ticket_proc, char proc_size)
+{
+    int sum = 0;
+    int random_number = 0;
+    for(int i = 0; i < proc_size; i++){
+        sum += ticket_proc[i];
+    }
+    if(sum <= 0) return -1;
+    random_number = rand() % sum;
+    for(int i = 0; i < proc_size; i++){
+        random_number -= ticket_proc[i];
+        if(random_number >= 0) continue;
+        return i;
+    }
+    return 0;
+}
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ce52e87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..da165ba 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..f7ae2b9 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 
+sys_settickets(void)
+{
+  int number;
+  argint(0, &number);
+  return settickets(number);
+}
+
+uint64 
+sys_getpinfo(void)
+{
+  uint64 pointer_to_pstat;
+  argaddr(0, &pointer_to_pstat);
+  return getpinfo((struct pstat *)pointer_to_pstat);
+}
diff --git a/task.txt b/task.txt
new file mode 100644
index 0000000..02f3194
--- /dev/null
+++ b/task.txt
@@ -0,0 +1,23 @@
+> Implemented:
+    - Random functions: rand and randomChoice
+    - Schedular
+    - rand.c added
+    - random seed planted in main.c
+     - system call: set ticket_id
+     - system call: get process_infos something
+    - user program ticket_id
+    - user program show table something
+
+* Need to fix:
+    - done: rand.c can't be added, working with rand.h 
+    - done: seed needs to planted in the main.c for rand generator
+    - done: process_stat needs pointer... how pointer buddy?? HOW!!!
+    - done: process ticket gets reinstated when all runnable process's ticket get 0
+    - original ticket number is maybe 1 or sth... make it super low
+
+> Needs implementation
+
+> Test line
+    - testticket 20 &; testticket 30 &; testticket 40 &; testticket 15 &; testticket 50 &;
+    - testprocinfo
+
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..def11a3
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,23 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+#include "kernel/pstat.h"
+
+int
+main(int argc, char *argv[])
+{
+    struct pstat ps;
+    getpinfo(&ps);
+    fprintf(1, "PID\t| In Use\t| Original Tickets\t| Current Tickets\t| Time Slices\n");
+    for(int i =0; i < NPROC; i++){
+        if(!ps.inuse[i]) continue;
+        fprintf(1, "%d\t  %d\t\t  %d\t\t\t  %d\t\t\t  %d\n", ps.pid[i], ps.inuse[i], ps.tickets_original[i], ps.tickets_current[i], ps.time_slices[i]);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..bc8a1ff
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,33 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+int
+main(int argc, char *argv[])
+{
+    if(argc < 2) {
+        fprintf(2, "Usage: %s tickets\n", argv[0]);
+        exit(1);
+    }
+
+    if(settickets(atoi(argv[1])) < 0){
+        fprintf(2, "%s: failed to set tickets\n", argv[0]);
+        exit(1);
+    }
+
+    int pid = fork();
+    if(pid < 0) {
+        fprintf(2, "%s: failed to fork\n", argv[0]);
+        exit(1);
+    }else if(pid == 0){
+        for(;;){}
+    }
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..b5ef267 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
